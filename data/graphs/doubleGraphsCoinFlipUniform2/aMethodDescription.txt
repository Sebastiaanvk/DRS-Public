
The graph format is:
"
seed
nrLayers
eltsLayer_0 eltsLayer_1 ...
nrEdges

// nrLayers rows follow here
weight_0_0 weight_0_1 ...
weight_1_0 weight_1_1
.
.
.

// nrEdges rows follow here
edgeLayer edgeElt_1 edgeElt_2 // We save the layer of the head of the edge and we save the index of the head and the tail within their respective layers
.
.

"



These graphs were generated with the following code snippets with initial input seed=0:
Using the following compiler flags:
# Compiler
CXX = g++
# Compiler flags
CXXFLAGS = -std=c++14 -pthread -m64 -g 


The github hash is:   2d04793c07f24308aececbcb5dbf814bf573d581



   doubleGraphsDefaultUniformRanges(8);

std::vector<int> generatePartition(int n, int k, std::mt19937& gen){
   std::uniform_int_distribution<int> dist(1,n+k-1);

   std::unordered_set<int> bars;

   while (bars.size()<k-1){
      int nextBar = dist(gen);
      bars.insert(nextBar);
   }

   std::vector<int> barVec(bars.begin(),bars.end());
   barVec.push_back(0);
   barVec.push_back(n+k);
   
   std::sort(barVec.begin(),barVec.end());

   std::vector<int> partition;
   for(int i=0; i<k; i++){
      partition.push_back(barVec[i+1]-barVec[i]-1);
   }   
   return partition;
}


std::vector<int> generatePartitionMinSize(int n, int k, int minSize, std::mt19937& gen){
   std::vector<int> parts = generatePartition(n-k*minSize,k,gen);
   for(int i=0; i<parts.size(); i++){
      parts[i] += minSize;
   }
   return parts;
}

MultipartiteSetGraph generateDoubleGraph(int nrNodes, int nrLayers, float minLayerRatio, float oddsSet1,  float edgeRatio1, float edgeRatio2, float edgeRatioCross, std::function<float(std::mt19937&)> weightFunction1, std::function<float(std::mt19937&)> weightFunction2, unsigned int seed){
   std::mt19937 gen(seed);
   int minLayerSize = std::max(1.0f,minLayerRatio)*nrNodes/nrLayers;
   std::vector<int> partition = generatePartitionMinSize(nrNodes,nrLayers, minLayerSize ,gen);

   MultipartiteSetGraph graph;
   graph.layers = nrLayers;
   std::set<VertexIndex> vertexSet1;
   
   std::bernoulli_distribution coinSet1(oddsSet1);

   std::bernoulli_distribution coinEdgeBoth1(edgeRatio1);
   std::bernoulli_distribution coinEdgeBoth2(edgeRatio2);
   std::bernoulli_distribution coinEdgeDiff(edgeRatioCross);

   for(int i=0; i<partition.size(); i++){
      graph.elementsPerLayer[i] = partition[i];
      for(int x=0; x<partition[i]; x++){
         // bool inSet1 = coinSet1(gen);
         // if(inSet1){
         if(((float)x/partition[i])<=oddsSet1){
            vertexSet1.insert({i,x});
            graph.values[{i,x}] = weightFunction1(gen);
         } else {
            graph.values[{i,x}] = weightFunction2(gen);
         }
         if(i>0){
            for(int y=0; y<partition[i-1]; y++){
               bool hasEdge;
               if(vertexSet1.count({i,x}) && vertexSet1.count({i-1,y})){
                  hasEdge = coinEdgeBoth1(gen);
               } else if( (!vertexSet1.count({i,x})) && !(vertexSet1.count({i-1,y})) ){
                  hasEdge = coinEdgeBoth2(gen);
               } else {
                  hasEdge = coinEdgeDiff(gen);
               }
               if( hasEdge ){
                  graph.edges.insert({{i-1,y},{i,x}});
               }
            }
         }
      }
   }

   return graph;
}

void storeGraph(const MultipartiteSetGraph& graph, unsigned int seed_to_generate, std::string fileName){
   std::ofstream outFile(fileName);
   if(!outFile){
      std::cout << "Failed to open file: " << fileName << std::endl;
      return;
   }
   outFile.clear();
   outFile << seed_to_generate << '\n';
   outFile << graph.getLayers() << '\n';
   for(int i=0; i<graph.getLayers(); i++){
      if(i!=0){
         outFile << ' ';
      }
      outFile << graph.getElementsInLayer(i);
   }
   outFile << '\n' << graph.edges.size() << "\n\n";


   for(int i=0; i<graph.getLayers(); i++){
      for(int j=0; j<graph.getElementsInLayer(i); j++){
         if(j!=0){
            outFile << ' ';
         }
         outFile << graph.getValue({i,j});
      }
      outFile << '\n';
   }
   
   for(auto e : graph.edges){
      VertexIndex v = e.first;
      VertexIndex w = e.second;
      outFile << '\n' << v.layer << ' ' << v.element << ' ' << w.element ;
   }
   outFile.close();
}



void doubleGraphsDefaultUniformRanges(unsigned int seed){

   int nrLayersMin = 3;
   int nrLayersMax = 8;
   int nrNodesMin = 50;
   int nrNodesMax = 220;

   float minLayerRatio = 0.80;

   float oddsSet1Min = 0.20;
   float oddsSet1Max = 0.50;

   float edgeRatio1Min = 0.20;
   float edgeRatio1Max = 0.50;

   float edgeRatio2Min = 0.15;
   float edgeRatio2Max = 0.35;

   float edgeRatioCrossMin = 0.05;
   float edgeRatioCrossMax = 0.15;

   int graphsPerPars = 5;

   std::string folderPath = "data/graphs/doubleGraphsCoinFlipUniform2";

   int maxWeight1 = 1000;
   float coinflip1 = 0.5f;
   int maxWeight2 = 100;
   float coinflip2 = 0.5f;

   std::function<float(std::mt19937&)> weightFunction1 = [maxWeight1,coinflip1](std::mt19937& gen) -> float {
      std::bernoulli_distribution distb(coinflip1);
      std::uniform_int_distribution<> dist(0,maxWeight1);
      if(distb(gen)){
         return dist(gen);
      }
      return 0;
   };

   std::function<float(std::mt19937&)> weightFunction2 = [maxWeight2,coinflip2](std::mt19937& gen) -> float {
      std::bernoulli_distribution distb(coinflip2);
      std::uniform_int_distribution<> dist(0,maxWeight2);
      if(distb(gen)){
         return dist(gen);
      }
      return 0;
   };

   int nrGraphs = 5000;

   std::random_device rd;
   std::default_random_engine gen(rd());

   int index = 0;

   std::uniform_int_distribution<int> nrLayersRand(nrLayersMin, nrLayersMax);
   std::uniform_int_distribution<int> nrNodesRand(nrNodesMin, nrNodesMax);

   std::uniform_real_distribution<float> oddsSet1Rand(oddsSet1Min,oddsSet1Max);
   std::uniform_real_distribution<float> edgeRatio1Rand(edgeRatio1Min,edgeRatio1Max);
   std::uniform_real_distribution<float> edgeRatio2Rand(edgeRatio2Min,edgeRatio2Max);
   std::uniform_real_distribution<float> edgeRatioCrossRand(edgeRatioCrossMin,edgeRatioCrossMax);


   for(int k=0; k<(nrGraphs-1)/graphsPerPars+1; k++){
      int nrLayers = nrLayersRand(gen);
      int nrNodes = nrNodesRand(gen);
      float oddsSet1 = oddsSet1Rand(gen);
      float edgeRatio1 = edgeRatio1Rand(gen);
      float edgeRatio2 = edgeRatio2Rand(gen);
      float edgeRatioCross = edgeRatioCrossRand(gen);

      for(int j=0; j<graphsPerPars; j++){
         MultipartiteSetGraph graph = generateDoubleGraph(nrNodes,nrLayers, minLayerRatio,
               oddsSet1, edgeRatio1, edgeRatio2, edgeRatioCross,
            weightFunction1, weightFunction2, seed+index);
         std::string str = std::to_string(index);
         while (str.length() < 4) {
            str = '0' + str;  
         }
         storeGraph(graph, seed+index, folderPath + "/graph"+ str + ".txt");
         index += 1;
      }
   }

}