
The graph format is:
"
seed
nrLayers
eltsLayer_0 eltsLayer_1 ...
nrEdges

// nrLayers rows follow here
weight_0_0 weight_0_1 ...
weight_1_0 weight_1_1
.
.
.

// nrEdges rows follow here
edgeLayer edgeElt_1 edgeElt_2 // We save the layer of the head of the edge and we save the index of the head and the tail within their respective layers
.
.

"



These graphs were generated with the following code snippets with initial input seed=0:
Using the following compiler flags:
# Compiler
CXX = g++
# Compiler flags
CXXFLAGS = -std=c++14 -pthread -m64 -g 


The github hash is: 37a75a8bd6d3787b5d85aeeb1a5ebaa7b037b021



saveDoubleGraphsDefaultValues(5);


std::vector<int> generatePartition(int n, int k, std::mt19937& gen){
   std::uniform_int_distribution<int> dist(1,n+k-1);

   std::unordered_set<int> bars;

   while (bars.size()<k-1){
      int nextBar = dist(gen);
      bars.insert(nextBar);
   }

   std::vector<int> barVec(bars.begin(),bars.end());
   barVec.push_back(0);
   barVec.push_back(n+k);
   
   std::sort(barVec.begin(),barVec.end());

   std::vector<int> partition;
   for(int i=0; i<k; i++){
      partition.push_back(barVec[i+1]-barVec[i]-1);
   }   
   return partition;
}


std::vector<int> generatePartitionMinSize(int n, int k, int minSize, std::mt19937& gen){
   std::vector<int> parts = generatePartition(n-k*minSize,k,gen);
   for(int i=0; i<parts.size(); i++){
      parts[i] += minSize;
   }
   return parts;
}

MultipartiteSetGraph generateDoubleGraph(int nrNodes, int nrLayers, float minLayerRatio, float oddsSet1,  float edgeRatio1, float edgeRatio2, float edgeRatioCross, std::function<float(std::mt19937&)> weightFunction1, std::function<float(std::mt19937&)> weightFunction2, unsigned int seed){
   std::mt19937 gen(seed);
   int minLayerSize = std::max(1.0f,minLayerRatio)*nrNodes/nrLayers;
   std::vector<int> partition = generatePartitionMinSize(nrNodes,nrLayers, minLayerSize ,gen);

   MultipartiteSetGraph graph;
   graph.layers = nrLayers;
   std::set<VertexIndex> vertexSet1;
   
   std::bernoulli_distribution coinSet1(oddsSet1);

   std::bernoulli_distribution coinEdgeBoth1(edgeRatio1);
   std::bernoulli_distribution coinEdgeBoth2(edgeRatio2);
   std::bernoulli_distribution coinEdgeDiff(edgeRatioCross);

   for(int i=0; i<partition.size(); i++){
      graph.elementsPerLayer[i] = partition[i];
      for(int x=0; x<partition[i]; x++){
         bool inSet1 = coinSet1(gen);
         if(inSet1){
            vertexSet1.insert({i,x});
            graph.values[{i,x}] = weightFunction1(gen);
         } else {
            graph.values[{i,x}] = weightFunction2(gen);
         }
         if(i>0){
            for(int y=0; y<partition[i-1]; y++){
               bool hasEdge;
               if(vertexSet1.count({i,x}) && vertexSet1.count({i-1,y})){
                  hasEdge = coinEdgeBoth1(gen);
               } else if( (!vertexSet1.count({i,x})) && !(vertexSet1.count({i-1,y})) ){
                  hasEdge = coinEdgeBoth2(gen);
               } else {
                  hasEdge = coinEdgeDiff(gen);
               }
               if( hasEdge ){
                  graph.edges.insert({{i-1,y},{i,x}});
               }
            }
         }
      }
   }

   return graph;
}



void storeGraph(const MultipartiteSetGraph& graph, unsigned int seed_to_generate, std::string fileName){
   std::ofstream outFile(fileName);
   if(!outFile){
      std::cout << "Failed to open file: " << fileName << std::endl;
      return;
   }
   outFile.clear();
   outFile << seed_to_generate << '\n';
   outFile << graph.getLayers() << '\n';
   for(int i=0; i<graph.getLayers(); i++){
      if(i!=0){
         outFile << ' ';
      }
      outFile << graph.getElementsInLayer(i);
   }
   outFile << '\n' << graph.edges.size() << "\n\n";


   for(int i=0; i<graph.getLayers(); i++){
      for(int j=0; j<graph.getElementsInLayer(i); j++){
         if(j!=0){
            outFile << ' ';
         }
         outFile << graph.getValue({i,j});
      }
      outFile << '\n';
   }
   
   for(auto e : graph.edges){
      VertexIndex v = e.first;
      VertexIndex w = e.second;
      outFile << '\n' << v.layer << ' ' << v.element << ' ' << w.element ;
   }
   outFile.close();
}



void saveDoubleGraphs(unsigned int seed, std::vector<int> nrLayers, std::vector<int> nrNodes, float minLayerRatio, 
      std::vector<float> oddsSet1, std::vector<float> edgeRatio1, std::vector<float> edgeRatio2, std::vector<float> edgeRatioCross,
      std::vector<float> weightRatio, int graphsPerPars, std::string folderPath){
   
   int sizes[7];
      
   sizes[0] = nrLayers.size();
   sizes[1] = nrNodes.size();
   sizes[2] = oddsSet1.size();
   sizes[3] = edgeRatio1.size();
   sizes[4] = edgeRatio2.size();
   sizes[5] = edgeRatioCross.size();
   sizes[6] = weightRatio.size();

   int total_graphs = 1;

   for(int i=0; i<7; i++){
      total_graphs *= sizes[i];
   }
   
   for(int i=0; i<total_graphs; i++){
      int indices[7];
      int remInd = i;
      for(int j=6; j>=0; j--){
         indices[j] = remInd%sizes[j];
         remInd /= sizes[j];
      }

      int maxWeight2 = 100;
      int maxWeight1 = weightRatio[indices[6]]*maxWeight2;
      

      std::function<float(std::mt19937&)> weightFunction1 = [maxWeight1](std::mt19937& gen) -> float {
         std::uniform_int_distribution<> dist(0,maxWeight1);
         return dist(gen);
      };

      std::function<float(std::mt19937&)> weightFunction2 = [maxWeight2](std::mt19937& gen) -> float {
         std::uniform_int_distribution<> dist(0,maxWeight2);
         return dist(gen);
      };

      for(int j=0; j<graphsPerPars; j++){
         int index = i*graphsPerPars + j;
         MultipartiteSetGraph graph = generateDoubleGraph(nrNodes[indices[1]],nrLayers[indices[0]], minLayerRatio,
               oddsSet1[indices[2]], edgeRatio1[indices[3]], edgeRatio2[indices[4]], edgeRatioCross[indices[5]],
            weightFunction1, weightFunction2, seed+index);
         std::string str = std::to_string(index);
         while (str.length() < 4) {
            str = '0' + str;  
         }
         storeGraph(graph, seed+index, folderPath + "/graph"+ str + ".txt");
      }

   }
}

void saveDoubleGraphsDefaultValues(unsigned int seed){

   std::vector<int> nrLayers = {3,4,5,6,7,8};
   std::vector<int> nrNodes = {90,120,150,180};
   float minLayerRatio = 0.80;
   std::vector<float> oddsSet1 = { 0.20, 0.30,0.40, 0.50};
   std::vector<float> edgeRatio1 = {0.40,0.50,0.60,0.70}; 
   std::vector<float> edgeRatio2 = {0.25,0.35,0.45,0.55};
   std::vector<float> edgeRatioCross = {0.20}; 
   std::vector<float> weightRatio  = {10};
   int graphsPerPars = 5;
   std::string folderPath = "data/graphs/doubleMini";

   saveDoubleGraphs(seed,nrLayers, nrNodes, minLayerRatio, oddsSet1, edgeRatio1, edgeRatio2,
            edgeRatioCross, weightRatio, graphsPerPars,folderPath);

}