The graph format is:
"
seed
nrLayers
eltsLayer_0 eltsLayer_1 ...
nrEdges

// nrLayers rows follow here
weight_0_0 weight_0_1 ...
weight_1_0 weight_1_1
.
.
.

// nrEdges rows follow here
edgeLayer edgeElt_1 edgeElt_2 // We save the layer of the head of the edge and we save the index of the head and the tail within their respective layers
.
.

"



These graphs were generated with the following code snippets with initial input seed=0:
Using the following compiler flags:
# Compiler
CXX = g++
# Compiler flags
CXXFLAGS = -std=c++14 -pthread -m64 -g 


The github hash is: fc72e2144fa292e603b877eef42051a2a12f5a13 


Code:

std::vector<int> generatePartition(int n, int k, std::mt19937& gen){
   std::uniform_int_distribution<int> dist(1,n+k-1);

   std::unordered_set<int> bars;

   while (bars.size()<k-1){
      int nextBar = dist(gen);
      bars.insert(nextBar);
   }

   std::vector<int> barVec(bars.begin(),bars.end());
   barVec.push_back(0);
   barVec.push_back(n+k);
   
   std::sort(barVec.begin(),barVec.end());

   std::vector<int> partition;
   for(int i=0; i<k; i++){
      partition.push_back(barVec[i+1]-barVec[i]-1);
   }   
   return partition;
}

std::vector<int> generatePartitionMinSize(int n, int k, int minSize, std::mt19937& gen){
   std::vector<int> parts = generatePartition(n-k*minSize,k,gen);
   for(int i=0; i<parts.size(); i++){
      parts[i] += minSize;
   }
   return parts;
}

std::vector<Edge> totalEdgeVector(const std::vector<int>& partition){
   std::vector<Edge> edges;
   for(int i=0; i<partition.size()-1; i++){
      for(int vertex1 = 0; vertex1<partition[i]; vertex1++ ){
         for(int vertex2 = 0; vertex2<partition[i+1]; vertex2++){
            edges.push_back({{i,vertex1},{i+1,vertex2}});
         }
      }
   }
   return edges;
}

std::vector<Edge> generateEdgesRatio(const std::vector<int>& partition, float edgeRatio, std::mt19937& gen){
   std::vector<Edge> edges = totalEdgeVector(partition);
   std::shuffle(edges.begin(),edges.end(),gen);
   int nrEdges = edges.size()*edgeRatio;
   edges.resize(std::min(nrEdges,int(edges.size())));
   return edges;
}

std::map<VertexIndex,float> genWeights(const std::vector<int>& partition, std::function<float(std::mt19937&)> weightFunction, std::mt19937& gen){
   std::map<VertexIndex,float> weights;

   for(int i=0; i<partition.size(); i++){
      for(int x=0; x<partition[i]; x++){
         weights[{i,x}] = weightFunction(gen);
      }
   }

   return weights;
}


MultipartiteSetGraph generateGraphEdgeRatio(int nrNodes, int nrLayers, int minLayerSize, float edgeRatio, std::function<float(std::mt19937&)> weightFunction, unsigned int seed){
   std::mt19937 gen(seed);
   std::vector<int> partition = generatePartitionMinSize(nrNodes,nrLayers, minLayerSize ,gen);
   std::vector<Edge> edgeVector= generateEdgesRatio(partition, edgeRatio, gen);
   MultipartiteSetGraph graph;
   graph.layers = nrLayers;
   for(int i=0; i<partition.size(); i++){
      graph.elementsPerLayer[i] = partition[i];
      for(int x=0; x<partition[i]; x++){
         graph.values[{i,x}] = weightFunction(gen);
      }
   }
   graph.values = genWeights(partition, weightFunction, gen);
   graph.edges.insert(edgeVector.begin(),edgeVector.end());

   return graph;
}

void saveGraphsUniformCoinflip1(unsigned int seed){
   std::mt19937 gen(seed);
   std::vector<int> nrLayers = {3,4,5,6,7,8,9,10};
   std::vector<int> nrNodes = {80,100,120,140,160};
   std::vector<float> edgesRatios = {0.20,0.30,0.40,0.50,0.60,0.70,0.80};
   std::vector<float> weightCoinFlipOdds = {0.20,0.40,0.60,0.80};

   int minEltsPerLayer = 8;
   int maxWeight = 1024;


   size_t size1 = nrLayers.size();
   size_t size2 = nrNodes.size();
   size_t size3 = edgesRatios.size();
   size_t size4 = weightCoinFlipOdds.size();
   

   // Parallelize the loops using OpenMP
//   #pragma omp parallel for collapse(4) // Beter niet gebruiken omdat std::mt19937 niet thread safe is :(

   for(size_t i=0; i<size1; i++){
      for(size_t j=0; j<size2; j++){
         for(size_t k=0; k<size3; k++){
            for(size_t l=0; l<size4; l++){
               int index = ((i*size2+j)*size3+k)*size4+l;
               float coinOdds = weightCoinFlipOdds[l];

               std::function<float(std::mt19937&)> weightFunction = [maxWeight, coinOdds](std::mt19937& gen) -> float {
                  std::uniform_int_distribution<> dist(0,maxWeight);
                  std::bernoulli_distribution distb(coinOdds);
                  if(distb(gen))
                        return dist(gen);
                  else
                        return 0;
               };
               
               MultipartiteSetGraph graph = generateGraphEdgeRatio(nrNodes[j],nrLayers[i],minEltsPerLayer,edgesRatios[k], weightFunction, index+seed);
               std::string str = std::to_string(index);
               while (str.length() < 4) {
                  str = '0' + str;  
               }
               storeGraph(graph,index+seed,"data/graphs/method_1/graph"+str);

                              
            }
         }
      }
   }
